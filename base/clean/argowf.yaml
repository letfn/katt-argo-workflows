---
# Source: argo-workflows/templates/controller/workflow-controller-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argowf-argo-workflows-workflow-controller
---
# Source: argo-workflows/templates/server/server-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argowf-argo-workflows-server
---
# Source: argo-workflows/templates/controller/workflow-controller-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argowf-argo-workflows-workflow-controller-configmap
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-cm
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
data:
  config: |
    containerRuntimeExecutor: docker
---
# Source: argo-workflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
---
# Source: argo-workflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: argo-workflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: argo-workflows/templates/controller/workflow-controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-workflow-controller
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-workflow-controller
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
  - create
- apiGroups:
  - argoproj.io
  resources:
  - workflowtemplates
  - workflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - cronworkflows
  - cronworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
- apiGroups:
  - "policy"
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  resourceNames:
  - workflow-controller
  - workflow-controller-lease
  verbs:
  - get
  - watch
  - update
  - patch
  - delete
---
# Source: argo-workflows/templates/controller/workflow-controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-workflow-controller-cluster-template
rules:
- apiGroups:
  - argoproj.io
  resources:
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
---
# Source: argo-workflows/templates/server/server-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-server
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
  - create
  - patch
- apiGroups:
    - argoproj.io
  resources:
    - eventsources
    - sensors
    - workflows
    - workfloweventbindings
    - workflowtemplates
    - cronworkflows
  verbs:
    - create
    - get
    - list
    - watch
    - update
    - patch
    - delete
---
# Source: argo-workflows/templates/server/server-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argowf-argo-workflows-server-cluster-template
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - argoproj.io
  resources:
  - clusterworkflowtemplates
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# Source: argo-workflows/templates/controller/workflow-controller-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argowf-argo-workflows-workflow-controller
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-workflow-controller
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argowf-argo-workflows-workflow-controller
subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-workflow-controller
    namespace: argo
  - kind: ServiceAccount
    name: argowf-argo-workflows-workflow-controller
    namespace: default
---
# Source: argo-workflows/templates/controller/workflow-controller-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argowf-argo-workflows-workflow-controller-cluster-template
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-workflow-controller
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argowf-argo-workflows-workflow-controller-cluster-template
subjects:
  - kind: ServiceAccount
    name: argowf-argo-workflows-workflow-controller
    namespace: argo
---
# Source: argo-workflows/templates/server/server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argowf-argo-workflows-server
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argowf-argo-workflows-server
subjects:
- kind: ServiceAccount
  name: argowf-argo-workflows-server
  namespace: argo
---
# Source: argo-workflows/templates/server/server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argowf-argo-workflows-server-cluster-template
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argowf-argo-workflows-server-cluster-template
subjects:
- kind: ServiceAccount
  name: argowf-argo-workflows-server
  namespace: argo
---
# Source: argo-workflows/templates/controller/workflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argowf-argo-workflows-workflow
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
# Source: argo-workflows/templates/controller/workflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argowf-argo-workflows-workflow
  namespace: argo
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
# Source: argo-workflows/templates/controller/workflow-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argowf-argo-workflows-workflow
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argowf-argo-workflows-workflow
subjects:
  - kind: ServiceAccount
    name: argo-workflow
    namespace: default
---
# Source: argo-workflows/templates/controller/workflow-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argowf-argo-workflows-workflow
  namespace: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argowf-argo-workflows-workflow
subjects:
  - kind: ServiceAccount
    name: argo-workflow
    namespace: argo
---
# Source: argo-workflows/templates/server/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: argowf-argo-workflows-server
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.1.8"
spec:
  ports:
  - port: 2746
    targetPort: 2746
  selector:
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
  sessionAffinity: None
  type: ClusterIP
---
# Source: argo-workflows/templates/controller/workflow-controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argowf-argo-workflows-workflow-controller
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-workflow-controller
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.1.8"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows-workflow-controller
      app.kubernetes.io/instance: argowf
  template:
    metadata:
      labels:
        helm.sh/chart: argo-workflows-0.6.0
        app.kubernetes.io/name: argo-workflows-workflow-controller
        app.kubernetes.io/instance: argowf
        app.kubernetes.io/component: workflow-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argo-workflows
        app.kubernetes.io/version: "v3.1.8"
    spec:
      serviceAccountName: argowf-argo-workflows-workflow-controller
      containers:
        - name: controller
          image: "quay.io/argoproj/workflow-controller:v3.1.8"
          imagePullPolicy: Always
          command: [ "workflow-controller" ]
          args:
          - "--configmap"
          - "argowf-argo-workflows-workflow-controller-configmap"
          - "--executor-image"
          - "quay.io/argoproj/argoexec:v3.1.8"
          - "--loglevel"
          - "info"
          - "--gloglevel"
          - "0"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          env:
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LEADER_ELECTION_IDENTITY
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          resources:
            {}
          ports:
            - name: metrics
              containerPort: 9090
            - containerPort: 6060
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6060
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 30
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: argo-workflows/templates/server/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argowf-argo-workflows-server
  labels:
    helm.sh/chart: argo-workflows-0.6.0
    app.kubernetes.io/name: argo-workflows-server
    app.kubernetes.io/instance: argowf
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.1.8"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows-server
      app.kubernetes.io/instance: argowf
  template:
    metadata:
      labels:
        helm.sh/chart: argo-workflows-0.6.0
        app.kubernetes.io/name: argo-workflows-server
        app.kubernetes.io/instance: argowf
        app.kubernetes.io/component: server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argo-workflows
        app.kubernetes.io/version: "v3.1.8"
    spec:
      serviceAccountName: argowf-argo-workflows-server
      containers:
        - name: argo-server
          image: "quay.io/argoproj/argocli:v3.1.8"
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
          args:
          - server
          - --configmap=argowf-argo-workflows-workflow-controller-configmap
          - "--secure=false"
          ports:
          - name: web
            containerPort: 2746
          readinessProbe:
            httpGet:
              path: /
              port: 2746
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 20
          env:
            - name: IN_CLUSTER
              value: "true"
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BASE_HREF
              value: "/"
          resources:
            {}
          volumeMounts:
          - name: tmp
            mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
